// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GIOModule")]
    pub struct IOModule(Object<ffi::GIOModule, ffi::GIOModuleClass>);

    match fn {
        type_ => || ffi::g_io_module_get_type(),
    }
}

impl IOModule {
    #[doc(alias = "g_io_module_new")]
    pub fn new(filename: impl AsRef<std::path::Path>) -> IOModule {
        unsafe { from_glib_full(ffi::g_io_module_new(filename.as_ref().to_glib_none().0)) }
    }

    #[doc(alias = "g_io_module_load")]
    pub fn load(&self) {
        unsafe {
            ffi::g_io_module_load(self.to_glib_none().0);
        }
    }

    #[doc(alias = "g_io_module_unload")]
    pub fn unload(&self) {
        unsafe {
            ffi::g_io_module_unload(self.to_glib_none().0);
        }
    }

    #[doc(alias = "g_io_module_query")]
    pub fn query() -> Vec<glib::GString> {
        unsafe { FromGlibPtrContainer::from_glib_full(ffi::g_io_module_query()) }
    }
}

impl fmt::Display for IOModule {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("IOModule")
    }
}

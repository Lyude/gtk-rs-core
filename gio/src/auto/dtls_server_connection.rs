// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::DatagramBased;
use crate::TlsAuthenticationMode;
use crate::TlsCertificate;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "GDtlsServerConnection")]
    pub struct DtlsServerConnection(Interface<ffi::GDtlsServerConnection, ffi::GDtlsServerConnectionInterface>) @requires DatagramBased;

    match fn {
        type_ => || ffi::g_dtls_server_connection_get_type(),
    }
}

impl DtlsServerConnection {
    #[doc(alias = "g_dtls_server_connection_new")]
    pub fn new(
        base_socket: &impl IsA<DatagramBased>,
        certificate: Option<&impl IsA<TlsCertificate>>,
    ) -> Result<DtlsServerConnection, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_dtls_server_connection_new(
                base_socket.as_ref().to_glib_none().0,
                certificate.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl DtlsServerConnection {
    pub const NONE: Option<&'static DtlsServerConnection> = None;
}

pub trait DtlsServerConnectionExt: 'static {
    #[doc(alias = "authentication-mode")]
    fn authentication_mode(&self) -> TlsAuthenticationMode;

    #[doc(alias = "authentication-mode")]
    fn set_authentication_mode(&self, authentication_mode: TlsAuthenticationMode);

    #[doc(alias = "authentication-mode")]
    fn connect_authentication_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DtlsServerConnection>> DtlsServerConnectionExt for O {
    fn authentication_mode(&self) -> TlsAuthenticationMode {
        glib::ObjectExt::property(self.as_ref(), "authentication-mode")
    }

    fn set_authentication_mode(&self, authentication_mode: TlsAuthenticationMode) {
        glib::ObjectExt::set_property(self.as_ref(), "authentication-mode", &authentication_mode)
    }

    fn connect_authentication_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_authentication_mode_trampoline<
            P: IsA<DtlsServerConnection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GDtlsServerConnection,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(DtlsServerConnection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::authentication-mode\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_authentication_mode_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for DtlsServerConnection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DtlsServerConnection")
    }
}

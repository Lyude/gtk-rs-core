// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Cancellable;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "GDatagramBased")]
    pub struct DatagramBased(Interface<ffi::GDatagramBased, ffi::GDatagramBasedInterface>);

    match fn {
        type_ => || ffi::g_datagram_based_get_type(),
    }
}

impl DatagramBased {
    pub const NONE: Option<&'static DatagramBased> = None;
}

pub trait DatagramBasedExt: 'static {
    #[doc(alias = "g_datagram_based_condition_check")]
    fn condition_check(&self, condition: glib::IOCondition) -> glib::IOCondition;

    #[doc(alias = "g_datagram_based_condition_wait")]
    fn condition_wait(
        &self,
        condition: glib::IOCondition,
        timeout: i64,
        cancellable: Option<&impl IsA<Cancellable>>,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "g_datagram_based_create_source")]
    fn create_source(
        &self,
        condition: glib::IOCondition,
        cancellable: Option<&impl IsA<Cancellable>>,
    ) -> glib::Source;

    //#[doc(alias = "g_datagram_based_receive_messages")]
    //fn receive_messages(&self, messages: /*Ignored*/&[&InputMessage], flags: i32, timeout: i64, cancellable: Option<&impl IsA<Cancellable>>) -> Result<i32, glib::Error>;

    //#[doc(alias = "g_datagram_based_send_messages")]
    //fn send_messages(&self, messages: /*Ignored*/&[&OutputMessage], flags: i32, timeout: i64, cancellable: Option<&impl IsA<Cancellable>>) -> Result<i32, glib::Error>;
}

impl<O: IsA<DatagramBased>> DatagramBasedExt for O {
    fn condition_check(&self, condition: glib::IOCondition) -> glib::IOCondition {
        unsafe {
            from_glib(ffi::g_datagram_based_condition_check(
                self.as_ref().to_glib_none().0,
                condition.into_glib(),
            ))
        }
    }

    fn condition_wait(
        &self,
        condition: glib::IOCondition,
        timeout: i64,
        cancellable: Option<&impl IsA<Cancellable>>,
    ) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_datagram_based_condition_wait(
                self.as_ref().to_glib_none().0,
                condition.into_glib(),
                timeout,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn create_source(
        &self,
        condition: glib::IOCondition,
        cancellable: Option<&impl IsA<Cancellable>>,
    ) -> glib::Source {
        unsafe {
            from_glib_full(ffi::g_datagram_based_create_source(
                self.as_ref().to_glib_none().0,
                condition.into_glib(),
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    //fn receive_messages(&self, messages: /*Ignored*/&[&InputMessage], flags: i32, timeout: i64, cancellable: Option<&impl IsA<Cancellable>>) -> Result<i32, glib::Error> {
    //    unsafe { TODO: call ffi:g_datagram_based_receive_messages() }
    //}

    //fn send_messages(&self, messages: /*Ignored*/&[&OutputMessage], flags: i32, timeout: i64, cancellable: Option<&impl IsA<Cancellable>>) -> Result<i32, glib::Error> {
    //    unsafe { TODO: call ffi:g_datagram_based_send_messages() }
    //}
}

impl fmt::Display for DatagramBased {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DatagramBased")
    }
}
